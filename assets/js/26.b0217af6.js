(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{307:function(t,a,_){"use strict";_.r(a);var s=_(14),v=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"服务端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务端"}},[t._v("#")]),t._v(" 服务端")]),t._v(" "),a("h2",{attrs:{id:"_1-谈谈-http-模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-谈谈-http-模型"}},[t._v("#")]),t._v(" 1. 谈谈 http 模型")]),t._v(" "),a("h3",{attrs:{id:"_1-1-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-概念"}},[t._v("#")]),t._v(" 1.1 概念")]),t._v(" "),a("ul",[a("li",[t._v("http 全称超文本传输协议，应用层的协议，是浏览器与服务器之间通信的协议，基于 TCP 协议")]),t._v(" "),a("li",[t._v("TCP 和 UDP 都是属于传输层的协议\n"),a("ul",[a("li",[t._v("TCP 是可靠型协议，需要三次握手连接，有丢包补发机制")]),t._v(" "),a("li",[t._v("UDP 是不可靠协议，不需要握手，丢包不管，一般用于实时通讯")])])])]),t._v(" "),a("h3",{attrs:{id:"_1-2-报文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-报文"}},[t._v("#")]),t._v(" 1.2 报文")]),t._v(" "),a("ol",[a("li",[t._v("协议通信的内容我们称为报文。")]),t._v(" "),a("li",[t._v("浏览器发送给服务器的叫请求报文，服务器返回给浏览器的叫做响应报文")]),t._v(" "),a("li",[t._v("报文组成："),a("code",[t._v("报文首行")]),t._v("、"),a("code",[t._v("报文头部（响应头/请求头）")]),t._v("、"),a("code",[t._v("空行")]),t._v("、"),a("code",[t._v("报文体（响应体/请求体）")])])]),t._v(" "),a("h3",{attrs:{id:"_1-3-请求报文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-请求报文"}},[t._v("#")]),t._v(" 1.3 请求报文")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("请求首行")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("GET")]),t._v(" 请求方式")]),t._v(" "),a("li",[a("code",[t._v("http://localhost:8000/src/api/product/trademark")]),t._v(" 请求地址")]),t._v(" "),a("li",[a("code",[t._v("HTTP")]),t._v(" 协议名")]),t._v(" "),a("li",[a("code",[t._v("1.1")]),t._v(" 版本号")])])]),t._v(" "),a("li",[a("p",[t._v("请求头")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Connection: keep-alive")]),t._v(" 保持长链接")]),t._v(" "),a("li",[a("code",[t._v("Content-Type")]),t._v(" 请求体参数类型\n"),a("ul",[a("li",[a("code",[t._v("application/json")]),t._v(" json 格式数据")]),t._v(" "),a("li",[a("code",[t._v("application/x-www-form-urlencoded")]),t._v(" form 表单提交数据格式")])])]),t._v(" "),a("li",[a("code",[t._v("User-Agent")]),t._v(" 用户代理")]),t._v(" "),a("li",[a("code",[t._v("Referer")]),t._v(" 请求来源地址")]),t._v(" "),a("li",[a("code",[t._v("Cookie")])])])]),t._v(" "),a("li",[a("p",[t._v("空行")])]),t._v(" "),a("li",[a("p",[t._v("请求体")])])]),t._v(" "),a("h3",{attrs:{id:"_1-4-响应报文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-响应报文"}},[t._v("#")]),t._v(" 1.4 响应报文")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("响应首行")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("HTTP")]),t._v(" 协议名")]),t._v(" "),a("li",[a("code",[t._v("1.1")]),t._v(" 版本号")]),t._v(" "),a("li",[a("code",[t._v("200")]),t._v(" 响应状态码")]),t._v(" "),a("li",[a("code",[t._v("OK")]),t._v(" 响应状态码文本内容")])])]),t._v(" "),a("li",[a("p",[t._v("响应头")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("access-control-allow-origin")]),t._v(" cors 允许跨域")]),t._v(" "),a("li",[a("code",[t._v("content-type")]),t._v(" 响应体数据类型")]),t._v(" "),a("li",[a("code",[t._v("Cache-Control")]),t._v(" 强制缓存控制")]),t._v(" "),a("li",[a("code",[t._v("Etag / Last-Modifined")]),t._v(" 协商缓存控制")])])]),t._v(" "),a("li",[a("p",[t._v("空行")])]),t._v(" "),a("li",[a("p",[t._v("请求体")])])]),t._v(" "),a("h2",{attrs:{id:"_2-http1-1-和-http2-0-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-http1-1-和-http2-0-的区别"}},[t._v("#")]),t._v(" 2. http1.1 和 http2.0 的区别")]),t._v(" "),a("ol",[a("li",[t._v("二进制格式\n"),a("ul",[a("li",[t._v("1.1 版本中,报文的头信息必须是文本，报文体可以是文本或者二进制，")]),t._v(" "),a("li",[t._v("2.0 版本两者都需要是二进制，统称为帧，分为头信息帧和数据帧，帧是实现多路复用的基础")])])]),t._v(" "),a("li",[t._v("多路复用\n"),a("ul",[a("li",[t._v("1.1 长连接复用为若干个请求队列串行化单线程处理，后面的请求等待前面的请求返回才能获得执行机会，一旦有请求超时，后续的请求只能被阻塞")]),t._v(" "),a("li",[t._v("2.0 依然使用 TCP 连接，但是采用多路复用，在同一个连接里，客户端和服务器都可以"),a("code",[t._v("同时发送")]),t._v("多个请求或者回应，不用一一顺序发送，解决了队头阻塞的问题。")])])]),t._v(" "),a("li",[t._v("头部压缩\n"),a("ul",[a("li",[t._v("1.1 在每次请求时都会携带所有的头部信息，造成带宽的浪费")]),t._v(" "),a("li",[t._v("2.0 采用头部压缩技术，首行字段会在客户端和服务端之间维护一个表格，使得相同的头部只传输一次，通过索引进行引用，减少带宽占用和传输时间")])])]),t._v(" "),a("li",[t._v("服务器推送\n"),a("ul",[a("li",[t._v("2.0 允许服务器，主动向客户端发送资源，无需客户端明确的请求，可以减少延迟和顺序请求次数")])])])]),t._v(" "),a("h2",{attrs:{id:"_3-http-和-https-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-http-和-https-的区别"}},[t._v("#")]),t._v(" 3. HTTP 和 HTTPS 的区别")]),t._v(" "),a("ol",[a("li",[t._v("HTTP 协议是超文本传输协议，连接很简单，是无状态的，信息是明文传输的，HTTPS 协议是有 SSL 和 HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 更加安全；")]),t._v(" "),a("li",[t._v("连接方式不同，默认端口也不相同，HTTP 默认是 80，HTTPS 默认端口是 443")]),t._v(" "),a("li",[t._v("HTTPS 协议需要申请 CA 证书")])]),t._v(" "),a("h2",{attrs:{id:"_4-tcp-的三次握手和四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-tcp-的三次握手和四次挥手"}},[t._v("#")]),t._v(" 4. TCP 的三次握手和四次挥手")]),t._v(" "),a("h3",{attrs:{id:"_4-1-三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-三次握手"}},[t._v("#")]),t._v(" 4.1 三次握手")]),t._v(" "),a("p",[a("code",[t._v("目的")]),t._v("：为了确认双方都具有接收和发送能力")]),t._v(" "),a("h3",{attrs:{id:"_4-2-四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-四次挥手"}},[t._v("#")]),t._v(" 4.2 四次挥手")]),t._v(" "),a("p",[a("code",[t._v("原因")]),t._v("： TCP 连接是"),a("code",[t._v("全双工通信")]),t._v("，需要分别释放到对方的连接，单独一方释放，只代表不能向对方发送数据，连接处于半释放的状态")]),t._v(" "),a("h2",{attrs:{id:"_5-当在浏览器输入一个地址后-按下回车发生了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-当在浏览器输入一个地址后-按下回车发生了什么"}},[t._v("#")]),t._v(" 5. 当在浏览器输入一个地址后，按下回车发生了什么？")]),t._v(" "),a("ol",[a("li",[t._v("解析 URL")]),t._v(" "),a("li",[t._v("缓存判断")]),t._v(" "),a("li",[t._v("DNS 解析")]),t._v(" "),a("li",[t._v("TCP 三次握手")]),t._v(" "),a("li",[t._v("发送请求")]),t._v(" "),a("li",[t._v("返回数据")]),t._v(" "),a("li",[t._v("页面渲染")]),t._v(" "),a("li",[t._v("TCP 四次挥手")])]),t._v(" "),a("h3",{attrs:{id:"_1-解析-url"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-解析-url"}},[t._v("#")]),t._v(" 1. 解析 URL")]),t._v(" "),a("p",[a("code",[t._v("解析 URL 合法性和有效性")])]),t._v(" "),a("h3",{attrs:{id:"_2-缓存判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-缓存判断"}},[t._v("#")]),t._v(" 2. 缓存判断")]),t._v(" "),a("p",[a("code",[t._v("判断是否有缓存")])]),t._v(" "),a("h3",{attrs:{id:"_3-dns-解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-dns-解析"}},[t._v("#")]),t._v(" 3. DNS 解析")]),t._v(" "),a("p",[a("code",[t._v("将域名地址解析为ip地址")])]),t._v(" "),a("h3",{attrs:{id:"_4-tcp-三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-tcp-三次握手"}},[t._v("#")]),t._v(" 4. TCP 三次握手")]),t._v(" "),a("p",[a("code",[t._v("确认接收双方的接受能力和发送能力都正常")])]),t._v(" "),a("h3",{attrs:{id:"_5-发送请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-发送请求"}},[t._v("#")]),t._v(" 5. 发送请求")]),t._v(" "),a("h3",{attrs:{id:"_6-返回数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-返回数据"}},[t._v("#")]),t._v(" 6. 返回数据")]),t._v(" "),a("h3",{attrs:{id:"_7-页面渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-页面渲染"}},[t._v("#")]),t._v(" 7. 页面渲染")]),t._v(" "),a("h3",{attrs:{id:"_8-tcp-四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-tcp-四次挥手"}},[t._v("#")]),t._v(" 8. TCP 四次挥手")]),t._v(" "),a("p",[a("code",[t._v("TCP 连接是全双工的连接，所以需要双方分别断开连接，单独一方释放连接，只代表不能再向对方发送数据，处于半释放状态")])]),t._v(" "),a("h2",{attrs:{id:"_6-强制缓存和协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-强制缓存和协商缓存"}},[t._v("#")]),t._v(" 6. 强制缓存和协商缓存")]),t._v(" "),a("p",[a("code",[t._v("概念")]),t._v("：浏览器会对请求的文件进行缓存，以便下一次访问时重复使用，节省带宽，提高访问速度，降低服务器压力")]),t._v(" "),a("ul",[a("li",[t._v("强制缓存")]),t._v(" "),a("li",[t._v("协商缓存")])]),t._v(" "),a("h2",{attrs:{id:"_7-websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-websocket"}},[t._v("#")]),t._v(" 7. WebSocket")]),t._v(" "),a("p",[a("code",[t._v("概念")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("是 HTML5 提供的一种浏览器与服务器进行 全双工通讯的网络协议，属于应用层协议")]),t._v(" "),a("li",[t._v("基于 TCP 传输协议，复用 HTTP 的握手通道，浏览器与服务器只需要进行一次握手，两者之间就可以直接创建持久性的连接")]),t._v(" "),a("li",[t._v("服务端和浏览器都可以主动推送消息，可以实现双向数据通信")])]),t._v(" "),a("p",[a("code",[t._v("API")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("构造函数")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("new WebSocket(url[, protocols])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("url")]),t._v(": 连接 WebSocket 服务器地址 一般长 ws:// http://")]),t._v(" "),a("li",[a("code",[t._v("protocols")]),t._v(": 一个协议字符串或者一个包含协议字符串的数组")])])])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("实例方法")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("close()")]),t._v(": 关闭 WebSocket 连接")]),t._v(" "),a("li",[a("code",[t._v("send(data)")]),t._v(": 发送消息给 WebSocket 服务器")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("事件")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("close")]),t._v(": 监听 WebSocket 关闭的事件")]),t._v(" "),a("li",[a("code",[t._v("error")]),t._v("：监听 WebSocket 错误的事件")]),t._v(" "),a("li",[a("code",[t._v("message")]),t._v("：监听客户端接受消息的事件")]),t._v(" "),a("li",[a("code",[t._v("open")]),t._v("：监听 WebSocket 连接好的事件")])]),t._v(" "),a("p",[a("code",[t._v("应用")]),t._v("：主要用于实时聊天，实时传输视频数据，大屏展示实时传递数据")]),t._v(" "),a("h2",{attrs:{id:"_8-谈谈-ajax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-谈谈-ajax"}},[t._v("#")]),t._v(" 8. 谈谈 ajax")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 创建 xhr 对象")]),t._v("\ncosnt xhr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 设置请求方法和地址")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://xxx/xx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 发送请求")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. 绑定事件，处理服务端返回的结果")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onreadystatechange")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n     0 － （未初始化）还没有调用send()方法\n     1 － （载入）已调用send()方法，正在发送请求\n     2 － （载入完成）send()方法执行完成，已经接收到全部响应内容\n     3 － （交互）正在解析响应内容\n     4 － （完成）响应内容解析完成，可以在客户端调用了\n    */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readystate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 失败")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_9-跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-跨域"}},[t._v("#")]),t._v(" 9. 跨域")]),t._v(" "),a("p",[a("code",[t._v("是什么")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("违背同源策略就会产生跨域，同源指的是：协议、ip、端口号三者必须完全一致")])]),t._v(" "),a("li",[a("p",[t._v("请求分为普通请求、ajax 请求，只有浏览器端的 ajax 请求存在跨域，服务器与服务器之间没有跨域、浏览器的 script、img、form 等标签都没有跨域。")])])]),t._v(" "),a("p",[a("code",[t._v("如何解决")]),t._v("：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("jsonp")]),t._v(": 利用 script 标签可以跨域特性进行跨域。")]),t._v(" "),a("li",[a("code",[t._v("cors")]),t._v(": 服务器设置特定响应头即可实现。")]),t._v(" "),a("li",[a("code",[t._v("NodeJS代理服务器")])]),t._v(" "),a("li",[a("code",[t._v("Nginx代理服务器")])])]),t._v(" "),a("h2",{attrs:{id:"_10-nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-nginx"}},[t._v("#")]),t._v(" 10. nginx")])])}),[],!1,null,null,null);a.default=v.exports}}]);