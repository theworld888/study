(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{308:function(e,v,_){"use strict";_.r(v);var c=_(14),o=Object(c.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"keep-alive"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive"}},[e._v("#")]),e._v(" keep-alive")]),e._v(" "),v("h2",{attrs:{id:"_1-流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-流程"}},[e._v("#")]),e._v(" 1. 流程")]),e._v(" "),v("blockquote",[v("p",[e._v("源码位置： vue\\src\\core\\components\\keep-alive.ts")])]),e._v(" "),v("ol",[v("li",[v("p",[e._v("初始化的方法")]),e._v(" "),v("ul",[v("li",[e._v("pruneCache：移除不匹配的组件")]),e._v(" "),v("li",[e._v("pruneCacheEntry：删除缓存的指定 "),v("code",[e._v("Key")]),e._v(" 的组件")]),e._v(" "),v("li",[e._v("this.cacheVNode：缓存 "),v("code",[e._v("Vnode")]),e._v(" 的组件实例")])])]),e._v(" "),v("li",[v("p",[e._v("执行生命周期")]),e._v(" "),v("ol",[v("li",[e._v("created：初始化数据\n"),v("ul",[v("li",[v("code",[e._v("this.cache")]),e._v("：对象，保存要缓存的组件对象")]),e._v(" "),v("li",[v("code",[e._v("this.keys")]),e._v("：数组，保存缓存的组件对象的的 "),v("code",[e._v("key")])])])]),e._v(" "),v("li",[e._v("render：获取虚拟DOM\n"),v("ol",[v("li",[e._v("获取"),v("code",[e._v("<keep-alive>")]),e._v(" 默认插槽传递的内容")]),e._v(" "),v("li",[e._v("检测组件是否需要缓存，是否在 "),v("code",[e._v("include")]),e._v(" 中, 或在 "),v("code",[e._v("exclude")]),e._v(" 中\n"),v("ul",[v("li",[e._v("不缓存，返回 "),v("code",[e._v("Vnode")])]),e._v(" "),v("li",[e._v("需要缓存\n"),v("ul",[v("li",[e._v("在 "),v("code",[e._v("this.cache")]),e._v(" 缓存过了，将缓存取出保存到 "),v("code",[e._v("Vnode")]),e._v(" 中，执行 "),v("code",[e._v("LRU")]),e._v(" 算法")]),e._v(" "),v("li",[e._v("未缓存，先"),v("strong",[e._v("暂存")]),e._v("到 "),v("code",[e._v("this.vnodeToCache")]),e._v("，"),v("code",[e._v("this.keyToCache")])])])])])])])]),e._v(" "),v("li",[e._v("mounted：真正缓存组件的阶段，将暂存的\n"),v("ul",[v("li",[e._v("调用 "),v("code",[e._v("this.cacheVNode()")]),e._v(" 进行真正的缓存\n"),v("ul",[v("li",[e._v("将暂存添加到真正的缓存 "),v("code",[e._v("this.cache")]),e._v("中")]),e._v(" "),v("li",[e._v("将 标识符 "),v("code",[e._v("key")]),e._v(" 添加到 "),v("code",[e._v("this.keys")]),e._v(" 最后")]),e._v(" "),v("li",[e._v("检测是否超出最大缓存数\n"),v("ul",[v("li",[e._v("超出：使用 "),v("code",[e._v("pruneCacheEntry")]),e._v(" 删除第一个缓存")]),e._v(" "),v("li",[e._v("未超出：释放暂存的组件")])])])])]),e._v(" "),v("li",[e._v("监听 "),v("code",[e._v("include")]),e._v(" 和 "),v("code",[e._v("exclude")]),e._v(" 这两个 "),v("code",[e._v("Props")]),e._v("，超出最大缓存数时，使用 "),v("code",[e._v("pruneCache")]),e._v(" 移除不匹配项")])])]),e._v(" "),v("li",[e._v("updated：调用 "),v("code",[e._v("this.cacheVNode()")]),e._v(" 重新缓存当前的组件")]),e._v(" "),v("li",[e._v("destroyed：调用 "),v("code",[e._v("pruneCacheEntry")]),e._v(" 遍历销毁所有缓存的组件")])])])])])}),[],!1,null,null,null);v.default=o.exports}}]);